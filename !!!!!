import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets('/tmp/data/', one_hot=True)
image = mnist.train.images[7].reshape([28, 28])
plt.gray()
plt.imshow(image)


print(mnist.train.images[7].shape)
print(mnist.train.labels[7].shape)
print(mnist.train.images[7][150:200])
print(mnist.train.labels[:10])

learning_rate = 0.1
epochs = 1000
batch_size = 128
n_hidden_1 = 256
n_hidden_2 = 256
num_input = 784 # 28 x 28
num_classes = 10
X = tf.placeholder('float', [None, num_input])
Y = tf.placeholder('float', [None, num_classes])
weights = {
'h1': tf.Variable(tf.random_normal([num_input, n_hidden_1])),
'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),
'output': tf.Variable(tf.random_normal([n_hidden_2, num_classes]))
}
biases = {
'b1': tf.Variable(tf.random_normal([n_hidden_1])),
'b2': tf.Variable(tf.random_normal([n_hidden_2])),
'output': tf.Variable(tf.random_normal([num_classes]))
}

def network(x):
  layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
  layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
  output_layer = tf.matmul(layer_2, weights['output']) + biases['output'],
  return output_layer




logits = network(X)
loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(
    logits=logits, labels=Y
    )
)
optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)
train = optimizer.minimize(loss)

correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

init = tf.global_variables_initializer()


#FIXME ПОСЛЕДНЯЯ ЧАСТЬ ВООБЩЕ НЕ РАБОТАЕТ, ПРОВЕРЯТЬ В JUPYTER
with tf.Session() as sess:
  sess.run(init)
    
  for epoch in range(epochs):
    batch_x, batch_y = mnist.train.next_batch(batch_size)
    sess.run(train, feed_dict={X: batch_x, Y: batch_y})
        
    if epoch % 50 == 0:
      train_accuracy = sess.run(
        accuracy,
        feed_dict={
          X: mnist.train.images,
          Y: mnist.train.labels
        }
      )
            
      print('Epoch #{}: train accuracy = {}'.format(epoch, train_accuracy))
            
  print('Test accuracy = {}'.format(
    sess.run(
      accuracy,
      feed_dict={
        X: mnist.test.images,
        Y: mnist.test.labels
      }
    )
  ))
