import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn import datasets
boston = datasets.load_boston()
boston.keys()
print(boston.DESCR[100:1300])
boston_df = pd.DataFrame(boston.data, columns=boston.feature_names)
boston_df.head()

#закомментировано, чтобы посмотреть второй график
# plt.figure(figsize=(6, 4))
# sns.distplot(boston.target)
# plt.xlabel('Price (in thousands)')
# plt.ylabel('Count')
# plt.tight_layout()


#метод fit - обучение модели в sklearn
#Boston.data -набор информации о признаках. Target -целевая переменная
from sklearn.linear_model import LinearRegression
linear_regression = LinearRegression()
model = linear_regression.fit(boston.data, boston.target)


feature_weight_df = pd.DataFrame(list(zip(boston.feature_names, model.coef_)))
feature_weight_df.columns = ['Feature', 'Weight']
print(feature_weight_df) #веса признаков
print("\n")

#предсказание вручную
import operator
first_predicted = sum(map(
lambda pair: operator.mul(*pair),
zip(model.coef_, boston.data[0])
))
first_predicted += model.intercept_
print(first_predicted)
print("\n")

#predict -метод получения автоматического предсказания
predicted = model.predict(boston.data)
print(predicted[:10])
print("\n")

#таблица предсказание и реальность
predictions_ground_truth_df = pd.DataFrame(list(zip(predicted, boston.target)))
predictions_ground_truth_df.columns = ['Prediction', 'Ground truth']
print(predictions_ground_truth_df.head())

#график предсказание и реальность
plt.figure(figsize=(6, 4))
plt.scatter(predicted, boston.target)
plt.xlabel('Predicted')
plt.ylabel('Ground truth')
plt.plot([0, 50], [0, 50], color='red')
plt.tight_layout()

plt.show()
